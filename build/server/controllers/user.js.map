{"version":3,"sources":["../../server/controllers/user.ts"],"names":["User","UserController","userRepository","constructor","this","getById","async","req","res","id","Number","params","user","await","status","send","JSON","stringify","error","json","message","getAll","ids","query","split","map","undefined","users","getUsers","create","fromObject","body","createdUser","update","updatedUser","delete","success","getFriendsByUserId","friends","getFriendsById"],"mappings":"OAEQA,IAA8B,KAAnB,yCAEEC,eAEGC,eAApBC,YAAoBD,GAAAE,KAAAF,eAAAA,CAAiC,CAE9CG,QAAUC,MAAOC,EAAgBC,KACpC,IACI,IAAMC,EAAKC,OAAOH,EAAII,OAAW,EAAC,EAC5BC,EAAOC,MAAMT,KAAKF,eAAeG,QAAQI,CAAE,EACjDD,EAAIM,OAAO,GAAG,EAAEC,KAAKC,KAAKC,UAAUL,CAAI,CAAC,C,CAC3C,MAAOM,GACLV,EAAIM,OAAO,GAAG,EAAEK,KAAK,CAAED,MAAOA,EAAME,OAAO,CAAE,C,CAErD,EAEOC,OAASf,MAAOC,EAAgBC,KACnC,IACI,IAAMc,EAAMf,EAAIgB,MAAW,IAAKhB,EAAIgB,MAAW,IAAaC,MAAM,GAAG,EAAEC,IAAIf,MAAM,EAAIgB,KAAAA,EAC/EC,EAAQd,MAAMT,KAAKF,eAAe0B,SAASN,CAAG,EACpDd,EAAIM,OAAO,GAAG,EAAEC,KAAKC,KAAKC,UAAUU,CAAK,CAAC,C,CAC5C,MAAOT,GACLV,EAAIM,OAAO,GAAG,EAAEK,KAAK,CAAED,MAAOA,EAAME,OAAO,CAAE,C,CAErD,EAEOS,OAASvB,MAAOC,EAAgBC,KACnC,IACI,IAAMI,EAAOZ,KAAK8B,WAAWvB,EAAIwB,IAAI,EAC/BC,EAAcnB,MAAMT,KAAKF,eAAe2B,OAAOjB,CAAI,EACzDJ,EAAIM,OAAO,GAAG,EAAEC,KAAKC,KAAKC,UAAUe,CAAW,CAAC,C,CAClD,MAAOd,GACLV,EAAIM,OAAO,GAAG,EAAEK,KAAK,CAAED,MAAOA,EAAME,OAAO,CAAE,C,CAErD,EAEOa,OAAS3B,MAAOC,EAAgBC,KACnC,IACI,IAAMC,EAAKC,OAAOH,EAAIwB,KAAS,EAAC,EAC1BnB,EAAO,IAAIZ,KAAKS,EAAIF,EAAIwB,KAAW,KAAGxB,EAAIwB,KAAY,MAAGxB,EAAIwB,KAAW,KAAGxB,EAAIwB,KAAa,OAAGxB,EAAIwB,KAAW,IAAC,EAC/GG,EAAcrB,MAAMT,KAAKF,eAAe+B,OAAOxB,EAAIG,CAAI,EAC7DJ,EAAIM,OAAO,GAAG,EAAEC,KAAKC,KAAKC,UAAUiB,CAAW,CAAC,C,CAClD,MAAOhB,GACLV,EAAIM,OAAO,GAAG,EAAEK,KAAK,CAAED,MAAOA,EAAME,OAAO,CAAE,C,CAErD,EAEOe,OAAS7B,MAAOC,EAAgBC,KACnC,IACI,IAAMC,EAAKC,OAAOH,EAAII,OAAW,EAAC,EAC5ByB,EAAUvB,MAAMT,KAAKF,eAAeiC,OAAO1B,CAAE,EACnDD,EAAIW,KAAK,CAAEiB,QAAAA,CAAO,CAAE,C,CACtB,MAAOlB,GACLV,EAAIM,OAAO,GAAG,EAAEK,KAAK,CAAED,MAAOA,EAAME,OAAO,CAAE,C,CAErD,EAEOiB,mBAAqB/B,MAAOC,EAAgBC,KAC/C,IACI,IAAMC,EAAKC,OAAOH,EAAII,OAAW,EAAC,EAC5B2B,EAAUzB,MAAMT,KAAKF,eAAeqC,eAAe9B,CAAE,EAC3DD,EAAIM,OAAO,GAAG,EAAEC,KAAKC,KAAKC,UAAUqB,CAAO,CAAC,C,CAC9C,MAAOpB,GACLV,EAAIM,OAAO,GAAG,EAAEK,KAAK,CAAED,MAAOA,EAAME,OAAO,CAAE,C,CAErD,C","file":"user.js","sourcesContent":["import UserRepository from \"../repository/user.js\";\r\nimport e from \"express\";\r\nimport {User} from \"../models/user.js\";\r\n\r\nexport default class UserController {\r\n\r\n    constructor(private userRepository: UserRepository) {}\r\n\r\n    public getById = async (req: e.Request, res: e.Response) => {\r\n        try {\r\n            const id = Number(req.params[\"id\"]);\r\n            const user = await this.userRepository.getById(id);\r\n            res.status(200).send(JSON.stringify(user));\r\n        } catch (error: any) {\r\n            res.status(404).json({ error: error.message });\r\n        }\r\n    };\r\n\r\n    public getAll = async (req: e.Request, res: e.Response) => {\r\n        try {\r\n            const ids = req.query[\"ids\"] ? (req.query[\"ids\"] as string).split(',').map(Number) : undefined;\r\n            const users = await this.userRepository.getUsers(ids);\r\n            res.status(200).send(JSON.stringify(users));\r\n        } catch (error: any) {\r\n            res.status(404).json({ error: error.message });\r\n        }\r\n    };\r\n\r\n    public create = async (req: e.Request, res: e.Response) => {\r\n        try {\r\n            const user = User.fromObject(req.body); // Предполагается, что вы передаете данные пользователя в теле запроса\r\n            const createdUser = await this.userRepository.create(user);\r\n            res.status(201).send(JSON.stringify(createdUser));\r\n        } catch (error: any) {\r\n            res.status(400).json({ error: error.message });\r\n        }\r\n    };\r\n\r\n    public update = async (req: e.Request, res: e.Response) => {\r\n        try {\r\n            const id = Number(req.body[\"id\"]);\r\n            const user = new User(id, req.body[\"name\"], req.body['email'], req.body['date'], req.body['status'], req.body['role']);\r\n            const updatedUser = await this.userRepository.update(id, user);\r\n            res.status(200).send(JSON.stringify(updatedUser));\r\n        } catch (error: any) {\r\n            res.status(400).json({ error: error.message });\r\n        }\r\n    };\r\n\r\n    public delete = async (req: e.Request, res: e.Response) => {\r\n        try {\r\n            const id = Number(req.params[\"id\"]);\r\n            const success = await this.userRepository.delete(id);\r\n            res.json({ success });\r\n        } catch (error: any) {\r\n            res.status(400).json({ error: error.message });\r\n        }\r\n    };\r\n\r\n    public getFriendsByUserId = async (req: e.Request, res: e.Response) => {\r\n        try {\r\n            const id = Number(req.params[\"id\"]);\r\n            const friends = await this.userRepository.getFriendsById(id);\r\n            res.status(200).send(JSON.stringify(friends));\r\n        } catch (error:any) {\r\n            res.status(400).json({ error: error.message });\r\n        }\r\n    };\r\n}"]}