import path from"path";import fs from"fs";import News from"../models/news.js";import{__data_dir}from"../config.js";import{Error}from"../types/error.js";export default class NewsRepository{static SAVE_FILENAME=path.join(__data_dir,"news-repository.json");news=new Map;static id;constructor(){this.load()}async getAllNews(){return[...this.news.values()].flat()}getNewsByAuthorId=async s=>{if(this.news.has(s))return[...this.news.get(s)];throw new Error(404,`User with id ${s} does not exist`)};getNews=async s=>{var e,t=[];for(const o of s)this.news.has(o)&&(e=await this.getNewsByAuthorId(o),t.push(...e));return t.sort((s,e)=>new Date(s.date).getTime()-new Date(e.date).getTime())};load(){if(fs.existsSync(NewsRepository.SAVE_FILENAME)){var s,e=fs.readFileSync(NewsRepository.SAVE_FILENAME);const t=JSON.parse(e.toString());NewsRepository.id=t.length;for(s of t){const t=News.fromObject(s);this.news.get(t.author_id)?this.news.get(t.author_id)?.push(t):this.news.set(t.author_id,[t])}console.info("[NewsRepository] Data loaded")}else console.warn(`[NewsRepository] Storage file ${NewsRepository.SAVE_FILENAME} is not found`)}async save(){var s=[];for(const t of this.news.values())s.push(JSON.stringify(t));var e=JSON.stringify(s);fs.existsSync(path.dirname(NewsRepository.SAVE_FILENAME))||(fs.mkdirSync(path.dirname(NewsRepository.SAVE_FILENAME)),console.log("[NewsRepository] Created directory "+path.dirname(NewsRepository.SAVE_FILENAME))),fs.writeFile(NewsRepository.SAVE_FILENAME,e,s=>{if(s)throw console.warn("[NewsRepository] Failed to save News to "+NewsRepository.SAVE_FILENAME),s;console.log("[NewsRepository] Saved News to "+NewsRepository.SAVE_FILENAME)})}}
//# sourceMappingURL=news.js.map
