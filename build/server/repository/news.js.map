{"version":3,"sources":["../../server/repository/news.ts"],"names":["path","fs","News","__data_dir","Error","NewsRepository","SAVE_FILENAME","join","news","Map","id","constructor","this","load","getAllNews","values","flat","getNewsByAuthorId","async","has","get","getNews","ids","let","buf","await","push","sort","a","b","Date","date","getTime","existsSync","NewsObj","readFileSync","JSON","parse","toString","length","fromObject","author_id","set","console","info","warn","save","json","stringify","data","dirname","mkdirSync","log","writeFile","err"],"mappings":"OAAOA,SAAU,cACVC,OAAQ,YACRC,SAAU,2BACTC,UAA+B,KAAd,sBACjBC,KAA+B,KAAnB,yCAECC,eACTC,qBAAgCN,KAAKO,KAAKJ,WAAY,sBAAsB,EAE7EK,KAA4B,IAAIC,IAC/BC,UAERC,cACIC,KAAKC,KAAI,CACb,CAEOC,mBACH,MAAO,CAAC,GAAGF,KAAKJ,KAAKO,OAAM,GAAIC,KAAI,CACvC,CAEOC,kBAAoBC,MAAOR,IAC9B,GAAKE,KAAKJ,KAAKW,IAAIT,CAAE,EAGrB,MAAO,CAAC,GAAGE,KAAKJ,KAAKY,IAAIV,CAAE,GAFvB,MAAM,IAAIN,MAAM,oBAAqBM,kBAAmB,CAGhE,EAEOW,QAAUH,MAAOI,IACpBC,IAKUC,EALNhB,EAAO,GACX,IAAI,MAAME,KAAMY,EACRV,KAAKJ,KAAKW,IAAIT,CAAE,IAGdc,EAAMC,MAAMb,KAAKK,kBAAkBP,CAAE,EAC3CF,EAAKkB,KAAK,GAAGF,CAAG,GAEpB,OAAOhB,EAAKmB,KAAK,CAACC,EAAQC,IAAW,IAAIC,KAAKF,EAAEG,IAAK,EAAEC,QAAO,EAAK,IAAIF,KAAKD,EAAEE,IAAK,EAAEC,QAAO,CAAE,CAClG,EAEQnB,OACJ,GAAIZ,GAAGgC,WAAW5B,eAAeC,aAAa,EAA9C,CAKA,IAIQ4B,EAJFV,EAAMvB,GAAGkC,aAAa9B,eAAeC,aAAa,EACxD,MAAME,EAAO4B,KAAKC,MAAMb,EAAIc,SAAQ,CAAE,EACtCjC,eAAeK,GAAKF,EAAK+B,OAEzB,IAAQL,KAAW1B,EAAK,CACpB,MAAMA,EAAON,KAAKsC,WAAWN,CAAO,EACpCtB,KAAKJ,KAAKY,IAAIZ,EAAKiC,SAAU,EACzB7B,KAAKJ,KAAKY,IAAYZ,EAAKiC,SAAS,GAAGf,KAAKlB,CAAI,EAChDI,KAAKJ,KAAKkC,IAAYlC,EAAKiC,UAAW,CAACjC,EAAK,C,CAEpDmC,QAAQC,KAAK,8BAA8B,C,MAdvCD,QAAQE,sCAAsCxC,eAAeC,4BAA4B,CAejG,CAEOwC,aACH,IAAMC,EAAO,GACb,IAAK,MAAM7C,KAAQU,KAAKJ,KAAKO,OAAM,EAC/BgC,EAAKrB,KAAKU,KAAKY,UAAU9C,CAAI,CAAC,EAElC,IAAM+C,EAAOb,KAAKY,UAAUD,CAAI,EAC3B9C,GAAGgC,WAAWjC,KAAKkD,QAAQ7C,eAAeC,aAAa,CAAC,IACzDL,GAAGkD,UAAUnD,KAAKkD,QAAQ7C,eAAeC,aAAa,CAAC,EACvDqC,QAAQS,IAAI,sCAAsCpD,KAAKkD,QAAQ7C,eAAeC,aAAa,CAAG,GAElGL,GAAGoD,UAAUhD,eAAeC,cAAe2C,EAAM,IAC7C,GAAIK,EAEA,MADAX,QAAQE,KAAK,2CAA2CxC,eAAeC,aAAe,EAChFgD,EAEVX,QAAQS,IAAI,kCAAkC/C,eAAeC,aAAe,CAChF,CAAC,CACL","file":"news.js","sourcesContent":["import path from \"path\";\r\nimport fs from \"fs\";\r\nimport News from \"../models/news.js\";\r\nimport {__data_dir} from \"../config.js\";\r\nimport {Error} from \"../types/error.js\"\r\n\r\nexport default class NewsRepository {\r\n    private static readonly SAVE_FILENAME = path.join(__data_dir, 'news-repository.json');\r\n\r\n    public news: Map<number, News[]> = new Map();\r\n    private static id: number;\r\n\r\n    constructor() {\r\n        this.load();\r\n    }\r\n\r\n    public async getAllNews(): Promise<News[]>{\r\n        return [...this.news.values()].flat()\r\n    }\r\n\r\n    public getNewsByAuthorId = async (id: number)=> {\r\n        if (!this.news.has(id)) {\r\n            throw new Error(404, `User with id ${id} does not exist`);\r\n        }\r\n        return [...this.news.get(id)!]\r\n    }\r\n\r\n    public getNews = async (ids: number[]) =>{\r\n        let news = []\r\n        for(const id of ids){\r\n            if(!this.news.has(id)){\r\n                continue\r\n            }\r\n            const buf = await this.getNewsByAuthorId(id)\r\n            news.push(...buf)\r\n        }\r\n        return news.sort((a:News, b:News) => new Date(a.date!).getTime() - new Date(b.date!).getTime())\r\n    }\r\n\r\n    private load(){\r\n        if(!fs.existsSync(NewsRepository.SAVE_FILENAME)){\r\n            console.warn(`[NewsRepository] Storage file ${NewsRepository.SAVE_FILENAME} is not found`)\r\n            return;\r\n        }\r\n\r\n        const buf = fs.readFileSync(NewsRepository.SAVE_FILENAME)\r\n        const news = JSON.parse(buf.toString())\r\n        NewsRepository.id = news.length\r\n\r\n        for(let NewsObj of news){\r\n            const news = News.fromObject(NewsObj)\r\n            this.news.get(news.author_id!) ?\r\n                this.news.get(<number>news.author_id)?.push(news) :\r\n                this.news.set(<number>news.author_id, [news])\r\n        }\r\n        console.info(`[NewsRepository] Data loaded`)\r\n    }\r\n\r\n    public async save(): Promise<void> {\r\n        const json = [];\r\n        for (const News of this.news.values()) {\r\n            json.push(JSON.stringify(News));\r\n        }\r\n        const data = JSON.stringify(json);\r\n        if (!fs.existsSync(path.dirname(NewsRepository.SAVE_FILENAME))) {\r\n            fs.mkdirSync(path.dirname(NewsRepository.SAVE_FILENAME));\r\n            console.log(`[NewsRepository] Created directory ${path.dirname(NewsRepository.SAVE_FILENAME)}`);\r\n        }\r\n        fs.writeFile(NewsRepository.SAVE_FILENAME, data, (err) => {\r\n            if (err) {\r\n                console.warn(`[NewsRepository] Failed to save News to ${NewsRepository.SAVE_FILENAME}`);\r\n                throw err;\r\n            }\r\n            console.log(`[NewsRepository] Saved News to ${NewsRepository.SAVE_FILENAME}`);\r\n        });\r\n    }\r\n}"]}