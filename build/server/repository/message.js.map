{"version":3,"sources":["../../server/repository/message.ts"],"names":["path","fs","Error","Message","__data_dir","MessageRepository","SAVE_FILENAME","join","messages","Map","id","constructor","this","load","getMessagesInChat","user_id","friend_id","key","sort","has","get","getChats","let","users","chats","elem","keys","includes","toString","split","map","parseInt","push","filter","getUserChats","await","result","buf","existsSync","readFileSync","messageObj","JSON","parse","message","fromObject","receiver_id","sender_id","set","console","info","warn"],"mappings":"OAAOA,SAAU,cACVC,OAAQ,YACPC,KAA+B,KAAnB,2BACbC,YAAa,8BACZC,UAA+B,KAAd,oCAEJC,kBACTC,qBAAgCN,KAAKO,KAAKH,WAAY,yBAAyB,EAC7EI,SAAW,IAAIC,IACjBC,UAERC,cACIC,KAAKC,KAAI,CACb,CAEOC,wBAAwBC,EAAiBC,GAC5C,IAAMC,EAAM,CAACF,EAASC,GAAWE,KAAI,EAAGX,KAAK,GAAG,EAChD,GAAIK,KAAKJ,SAASW,IAAIF,CAAG,EAGzB,OAAOL,KAAKJ,SAASY,IAAIH,CAAG,EAFxB,MAAM,IAAIf,MAAM,uBAAwBa,SAAeC,kBAA0B,CAGzF,CAEOK,eAAeN,GAClBO,IAGcC,EAHVC,EAAkB,GACtB,IAAI,MAAMC,KAAQb,KAAKJ,SAASkB,KAAI,EAC7BD,EAAKE,SAASZ,EAAQa,SAAQ,CAAE,IACzBL,EAAQE,EAAKI,MAAM,GAAG,EAAEC,IAAIL,GAAQM,SAASN,CAAI,CAAC,EACxDD,EAAMQ,KAAK,GAAGT,EAAMU,OAAOR,GAAQA,GAAQV,CAAO,CAAC,GAG3D,OAAOS,CACX,CAEOU,mBAAmBnB,GACtB,IAAMS,EAAQW,MAAMvB,KAAKS,SAASN,CAAO,EACzC,GAAG,CAACS,EACA,MAAM,IAAItB,MAAM,IAAK,iBAAiB,EAE1CoB,IAAIc,EAAS,GACb,IAAI,MAAMX,KAAQD,EAAM,CACpB,IAAMa,EAAMF,MAAMvB,KAAKE,kBAAkBC,EAASU,CAAI,EACnDY,GACCD,EAAOJ,KAAKK,CAAG,C,CAGvB,OAAOD,CACX,CAEQvB,OACJ,GAAIZ,GAAGqC,WAAWjC,kBAAkBC,aAAa,EAAjD,CAKA,IAAM+B,EAAMpC,GAAGsC,aAAalC,kBAAkBC,aAAa,EAG3D,IAAI,MAAMkC,KAFOC,KAAKC,MAAML,EAAIT,SAAQ,CAAE,EAET,CAC7B,IAAMe,EAAUxC,QAAQyC,WAAWJ,CAAU,EACvCvB,EAAM,CAAC0B,EAAQE,YAAaF,EAAQG,WAAW5B,KAAI,EAAGX,KAAK,GAAG,EAChEK,KAAKJ,SAASW,IAAIF,CAAG,EAGrBL,KAAKJ,SAASY,IAAIH,CAAG,GAAGe,KAAKW,CAAO,EAFpC/B,KAAKJ,SAASuC,IAAI9B,EAAK,CAAC0B,EAAQ,C,CAMxCK,QAAQC,KAAK,iCAAiC,C,MAjB1CD,QAAQE,yCAAyC7C,kBAAkBC,4BAA4B,CAkBvG","file":"message.js","sourcesContent":["import path from \"path\";\r\nimport fs from \"fs\";\r\nimport {Error} from \"../types/error.js\";\r\nimport Message from \"../models/message.js\";\r\nimport {__data_dir} from \"../config.js\";\r\n\r\nexport default class MessageRepository{\r\n    private static readonly SAVE_FILENAME = path.join(__data_dir, 'message-repository.json');\r\n    protected messages = new Map<string, Message[]>()\r\n    private static id: number;\r\n\r\n    constructor() {\r\n        this.load()\r\n    }\r\n\r\n    public async getMessagesInChat(user_id: number, friend_id: number): Promise<void|Message[]>{\r\n        const key = [user_id, friend_id].sort().join('-')\r\n        if(!this.messages.has(key)){\r\n            throw new Error(404, `Chat between id ${user_id} and ${friend_id} does not exist`);\r\n        }\r\n        return this.messages.get(key)\r\n    }\r\n\r\n    public async getChats(user_id: number): Promise<void|number[]>{\r\n        let chats: number[] = []\r\n        for(const elem of this.messages.keys()){\r\n            if(elem.includes(user_id.toString())){\r\n                const users = elem.split('-').map(elem => parseInt(elem))\r\n                chats.push(...users.filter(elem => elem != user_id))\r\n            }\r\n        }\r\n        return chats\r\n    }\r\n\r\n    public async getUserChats(user_id: number) {\r\n        const chats = await this.getChats(user_id)\r\n        if(!chats){\r\n            throw new Error(404, 'Chats not found')\r\n        }\r\n        let result = []\r\n        for(const elem of chats){\r\n            const buf = await this.getMessagesInChat(user_id, elem)\r\n            if(buf){\r\n                result.push(buf)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    private load(){\r\n        if(!fs.existsSync(MessageRepository.SAVE_FILENAME)){\r\n            console.warn(`[MessageRepository] Storage file ${MessageRepository.SAVE_FILENAME} is not found`)\r\n            return;\r\n        }\r\n\r\n        const buf = fs.readFileSync(MessageRepository.SAVE_FILENAME)\r\n        const messages = JSON.parse(buf.toString())\r\n\r\n        for(const messageObj of messages){\r\n            const message = Message.fromObject(messageObj)\r\n            const key = [message.receiver_id, message.sender_id].sort().join('-')\r\n            if(!this.messages.has(key)){\r\n                this.messages.set(key, [message])\r\n            }else{\r\n                this.messages.get(key)?.push(message)\r\n            }\r\n        }\r\n\r\n        console.info(`[MessageRepository] Data loaded`)\r\n    }\r\n}"]}