{"version":3,"sources":["../../server/repository/user.ts"],"names":["path","__data_dir","User","Error","fs","UserRepository","SAVE_FILENAME","join","users","Map","id","constructor","this","load","getById","async","has","get","getUsers","ids","undefined","values","filter","Number","map","create","user","isValid","set","console","info","name","await","save","update","oldUser","email","date","status","role","friends","delete","getFriendsById","friends_ids","let","elem","push","existsSync","userObj","buf","readFileSync","JSON","parse","toString","length","fromObject","warn","json","Array","from","data","stringify","dirname","mkdirSync","log","writeFileSync"],"mappings":"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","file":"user.js","sourcesContent":["import path from \"path\";\r\nimport {__data_dir} from \"../config.js\";\r\nimport {User} from \"../models/user.js\";\r\nimport {Error} from \"../types/error.js\"\r\nimport fs from \"fs\";\r\n\r\n\r\nexport default class UserRepository {\r\n    private static readonly SAVE_FILENAME = path.join(__data_dir, 'user-repository.json');\r\n\r\n    public users: Map<number, User> = new Map();\r\n    private static id: number;\r\n\r\n    constructor() {\r\n        this.load();\r\n    }\r\n\r\n    public getById = async (id: number) => {\r\n        if (!this.users.has(id)) {\r\n            throw new Error(404, `User with id ${id} does not exist`);\r\n        }\r\n        return this.users.get(id)!;\r\n    }\r\n\r\n    public async getUsers(ids?: number[]): Promise<User[]> {\r\n        if (ids === undefined) {\r\n            return [...this.users.values()];\r\n        } else {\r\n            return ids\r\n                .filter((id) => this.users.has(Number(id)))\r\n                .map((id) => this.users.get(Number(id))!);\r\n        }\r\n    }\r\n\r\n    public async create(user: User): Promise<User>{\r\n        if (!user.isValid()){\r\n            throw new Error(400, 'Invalid Request Body')\r\n        }\r\n        user.id = UserRepository.id++\r\n        this.users?.set(user.id, user)\r\n        console.info(`[UserRepository] User created: ${user.name}`)\r\n        await this.save()\r\n        return user;\r\n    }\r\n\r\n    public async update(id: number, user: User): Promise<User>{\r\n        if(!user.isValid()){\r\n            throw new Error(400, `Bad Request`)\r\n        }\r\n\r\n        if(!this.users?.has(id)){\r\n            throw new Error(404, `User with ID ${id} is not found`)\r\n        }\r\n\r\n        const oldUser = this.users.get(id)!\r\n\r\n        user.id = user.id ?? oldUser.id;\r\n        user.name = user.name ?? oldUser.name;\r\n        user.email = user.email ?? oldUser.email;\r\n        user.date = user.date ?? oldUser.date;\r\n        user.status = user.status ?? oldUser.status;\r\n        user.role = user.role ?? oldUser.role;\r\n        user.friends = user.friends ?? oldUser.friends;\r\n\r\n        this.users?.set(id, user);\r\n        console.info(`[UserRepository] User edited: ${user.name}`)\r\n        await this.save()\r\n        return user\r\n    }\r\n\r\n    public async delete(id: number): Promise<Boolean>{\r\n        if(!this.users?.has(id)){\r\n            throw new Error(404, `User with ID ${id} is not found`)\r\n        }\r\n        this.users?.delete(id)\r\n        await this.save()\r\n        return true\r\n    }\r\n\r\n    public async getFriendsById(id: number): Promise<User[]>{\r\n        if(!this.users.has(id)){\r\n            throw new Error(404, `User with id ${id} does not exist`);\r\n        }\r\n        const friends_ids = this.users.get(id)!.friends\r\n        if(!friends_ids){\r\n            throw new Error(404, 'Friends not found')\r\n        }\r\n        let friends:User[] = []\r\n        for(const elem of friends_ids){\r\n            if(this.users.has(elem)){\r\n                friends.push(<User>this.users.get(elem))\r\n            }\r\n        }\r\n        return friends\r\n    }\r\n\r\n    private load(){\r\n        if(!fs.existsSync(UserRepository.SAVE_FILENAME)){\r\n            console.warn(`[UserRepository] Storage file ${UserRepository.SAVE_FILENAME} is not found`)\r\n            return;\r\n        }\r\n\r\n        const buf = fs.readFileSync(UserRepository.SAVE_FILENAME)\r\n        const users = JSON.parse(buf.toString());\r\n        UserRepository.id = users.length;\r\n\r\n        for (let userObj of users) {\r\n            const user = User.fromObject(userObj);\r\n            this.users.set(user.id!, user);\r\n        }\r\n        console.info(`[UserRepository] Data loaded`);\r\n    }\r\n\r\n    async save() {\r\n        const json = Array.from(this.users.values()); // Преобразуйте Map в массив объектов пользователей\r\n        const data = JSON.stringify(json, null, 2); // Преобразуйте массив в JSON-строку\r\n\r\n        if (!fs.existsSync(path.dirname(UserRepository.SAVE_FILENAME))) {\r\n            fs.mkdirSync(path.dirname(UserRepository.SAVE_FILENAME));\r\n            console.log(`[UserRepository] Created directory ${path.dirname(UserRepository.SAVE_FILENAME)}`);\r\n        }\r\n\r\n        fs.writeFileSync(UserRepository.SAVE_FILENAME, data);\r\n        console.log(`[UserRepository] Data saved to ${UserRepository.SAVE_FILENAME}`);\r\n    }\r\n}"]}