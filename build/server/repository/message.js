import path from"path";import fs from"fs";import{Error}from"../types/error.js";import Message from"../models/message.js";import{__data_dir}from"../config.js";export default class MessageRepository{static SAVE_FILENAME=path.join(__data_dir,"message-repository.json");messages=new Map;static id;constructor(){this.load()}async getMessagesInChat(s,e){var t=[s,e].sort().join("-");if(this.messages.has(t))return this.messages.get(t);throw new Error(404,`Chat between id ${s} and ${e} does not exist`)}async getChats(e){var s,t=[];for(const o of this.messages.keys())o.includes(e.toString())&&(s=o.split("-").map(s=>parseInt(s)),t.push(...s.filter(s=>s!=e)));return t}async getUserChats(s){var e=await this.getChats(s);if(!e)throw new Error(404,"Chats not found");var t=[];for(const r of e){var o=await this.getMessagesInChat(s,r);o&&t.push(o)}return t}load(){if(fs.existsSync(MessageRepository.SAVE_FILENAME)){var s=fs.readFileSync(MessageRepository.SAVE_FILENAME);for(const o of JSON.parse(s.toString())){var e=Message.fromObject(o),t=[e.receiver_id,e.sender_id].sort().join("-");this.messages.has(t)?this.messages.get(t)?.push(e):this.messages.set(t,[e])}console.info("[MessageRepository] Data loaded")}else console.warn(`[MessageRepository] Storage file ${MessageRepository.SAVE_FILENAME} is not found`)}}
//# sourceMappingURL=message.js.map
