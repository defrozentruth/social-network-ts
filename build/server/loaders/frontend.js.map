{"version":3,"sources":["../../server/loaders/frontend.ts"],"names":["repositoryPool","server","get","req","res","render","async","userData","response","await","fetch","method","ok","json","users","console","error","status","send","message","currentUserId","parseInt","params","let","renderData","currentUser","user","responseData","usersChats","messageRepo","getUserChats","usersNews","newsRepo","getNews","user_id"],"mappings":"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","file":"frontend.js","sourcesContent":["import express, {Express, Request, Response} from 'express';\r\nimport repositoryPool from \"../repository/repository-pool.js\";\r\n\r\n\r\nexport default (server: Express) => {\r\n    server.get('/', (req: Request, res: Response) => {\r\n        res.render('startPage');\r\n    });\r\n\r\n    server.get('/user', async (req: Request, res: Response) => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/api/user', { method: 'GET' });\r\n\r\n            if (response.ok) {\r\n                const userData = await response.json();\r\n                res.render('usersPage', { users: userData });\r\n            } else {\r\n                console.error('Произошла ошибка при получении данных:', response.status);\r\n                res.status(500).send('Произошла ошибка при получении данных');\r\n            }\r\n        } catch (error: any) {\r\n            console.error('Произошла ошибка:', error.message);\r\n            res.status(500).send('Произошла ошибка');\r\n        }\r\n    });\r\n\r\n    server.get('/friends/:id(\\\\d+)', async (req: Request, res: Response) => {\r\n        const currentUserId = parseInt(req.params[\"id\"]);\r\n        try {\r\n            let renderData: any = {};\r\n            let response = await fetch(`http://localhost:8080/api/user/${currentUserId}`, { method: 'GET' });\r\n\r\n            if (response.ok) {\r\n                renderData.currentUser = await response.json();\r\n            } else {\r\n                console.error('Произошла ошибка при получении данных:', response.status);\r\n                res.status(500).send('Произошла ошибка при получении данных');\r\n                return;\r\n            }\r\n\r\n            response = await fetch(`http://localhost:8080/api/friend/${currentUserId}`, { method: 'GET' });\r\n\r\n            if (response.ok) {\r\n                renderData.users = await response.json();\r\n            } else {\r\n                console.error('Произошла ошибка при получении данных:', response.status);\r\n                res.status(500).send('Произошла ошибка при получении данных');\r\n                return;\r\n            }\r\n\r\n            res.render('usersFriends', { users: renderData.users, user: renderData.currentUser });\r\n        } catch (error: any) {\r\n            console.error('Произошла ошибка:', error.message);\r\n            res.status(500).send('Произошла ошибка');\r\n        }\r\n    });\r\n\r\n    server.get('/message/:id(\\\\d+)', async (req: Request, res: Response) => {\r\n        const currentUserId = parseInt(req.params[\"id\"]);\r\n        try {\r\n            let responseData: any = {}\r\n            const response = await fetch(`http://localhost:8080/api/user/${currentUserId}`, {method: \"GET\"})\r\n            if(response.ok){\r\n                responseData.currentUser = await response.json()\r\n            }\r\n            res.render('usersChats', {usersChats: await repositoryPool.messageRepo.getUserChats(currentUserId), user: responseData.currentUser});\r\n        } catch (error: any) {\r\n            console.error('Произошла ошибка:', error.message);\r\n            res.status(500).send('Произошла ошибка');\r\n        }\r\n    });\r\n\r\n    server.get('/news/:id(\\\\d+)', async (req: Request, res: Response) => {\r\n        const currentUserId = parseInt(req.params[\"id\"]);\r\n        try {\r\n            let responseData: any = {}\r\n            const response = await fetch(`http://localhost:8080/api/user/${currentUserId}`, {method: \"GET\"})\r\n            if(response.ok){\r\n                responseData.currentUser = await response.json()\r\n            }\r\n            res.render('usersNews', {usersNews: await repositoryPool.newsRepo.getNews(responseData.currentUser[\"friends\"]), user: responseData.currentUser});\r\n        }catch (error: any) {\r\n            console.error('Произошла ошибка:', error.message);\r\n            res.status(500).send('Произошла ошибка');\r\n        }\r\n    });\r\n\r\n    server.get('/user/edit/:id(\\\\d+)', async (req: Request, res: Response) => {\r\n        const user_id = parseInt(req.params['id'])\r\n        try {\r\n            let responseData: any = {}\r\n            const response = await fetch(`http://localhost:8080/api/user/${user_id}`, {method: \"GET\"})\r\n            if(response.ok){\r\n                responseData.currentUser = await response.json()\r\n            }\r\n            res.render('editUser', {user: responseData.currentUser});\r\n        }catch (error: any) {\r\n            console.error('Произошла ошибка:', error.message);\r\n            res.status(500).send('Произошла ошибка');\r\n        }\r\n    })\r\n}"]}